// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadPort_block returns the embedded CollectionSpec for port_block.
func loadPort_block() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Port_blockBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load port_block: %w", err)
	}

	return spec, err
}

// loadPort_blockObjects loads port_block and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*port_blockObjects
//	*port_blockPrograms
//	*port_blockMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPort_blockObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPort_block()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// port_blockSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_blockSpecs struct {
	port_blockProgramSpecs
	port_blockMapSpecs
	port_blockVariableSpecs
}

// port_blockProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_blockProgramSpecs struct {
	DropTcpPort *ebpf.ProgramSpec `ebpf:"drop_tcp_port"`
}

// port_blockMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_blockMapSpecs struct {
	ConfigMap *ebpf.MapSpec `ebpf:"config_map"`
}

// port_blockVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type port_blockVariableSpecs struct {
}

// port_blockObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPort_blockObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_blockObjects struct {
	port_blockPrograms
	port_blockMaps
	port_blockVariables
}

func (o *port_blockObjects) Close() error {
	return _Port_blockClose(
		&o.port_blockPrograms,
		&o.port_blockMaps,
	)
}

// port_blockMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPort_blockObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_blockMaps struct {
	ConfigMap *ebpf.Map `ebpf:"config_map"`
}

func (m *port_blockMaps) Close() error {
	return _Port_blockClose(
		m.ConfigMap,
	)
}

// port_blockVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadPort_blockObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_blockVariables struct {
}

// port_blockPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPort_blockObjects or ebpf.CollectionSpec.LoadAndAssign.
type port_blockPrograms struct {
	DropTcpPort *ebpf.Program `ebpf:"drop_tcp_port"`
}

func (p *port_blockPrograms) Close() error {
	return _Port_blockClose(
		p.DropTcpPort,
	)
}

func _Port_blockClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed port_block_bpfeb.o
var _Port_blockBytes []byte
