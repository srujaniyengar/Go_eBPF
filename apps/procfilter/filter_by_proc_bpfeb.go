// Code generated by bpf2go; DO NOT EDIT.
//go:build mips || mips64 || ppc64 || s390x

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadFilter_by_proc returns the embedded CollectionSpec for filter_by_proc.
func loadFilter_by_proc() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Filter_by_procBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load filter_by_proc: %w", err)
	}

	return spec, err
}

// loadFilter_by_procObjects loads filter_by_proc and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*filter_by_procObjects
//	*filter_by_procPrograms
//	*filter_by_procMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadFilter_by_procObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadFilter_by_proc()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// filter_by_procSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_by_procSpecs struct {
	filter_by_procProgramSpecs
	filter_by_procMapSpecs
	filter_by_procVariableSpecs
}

// filter_by_procProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_by_procProgramSpecs struct {
	FilterProcessPort *ebpf.ProgramSpec `ebpf:"filter_process_port"`
}

// filter_by_procMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_by_procMapSpecs struct {
	AllowedPortMap *ebpf.MapSpec `ebpf:"allowed_port_map"`
	TargetPidMap   *ebpf.MapSpec `ebpf:"target_pid_map"`
}

// filter_by_procVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type filter_by_procVariableSpecs struct {
}

// filter_by_procObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadFilter_by_procObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_by_procObjects struct {
	filter_by_procPrograms
	filter_by_procMaps
	filter_by_procVariables
}

func (o *filter_by_procObjects) Close() error {
	return _Filter_by_procClose(
		&o.filter_by_procPrograms,
		&o.filter_by_procMaps,
	)
}

// filter_by_procMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadFilter_by_procObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_by_procMaps struct {
	AllowedPortMap *ebpf.Map `ebpf:"allowed_port_map"`
	TargetPidMap   *ebpf.Map `ebpf:"target_pid_map"`
}

func (m *filter_by_procMaps) Close() error {
	return _Filter_by_procClose(
		m.AllowedPortMap,
		m.TargetPidMap,
	)
}

// filter_by_procVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadFilter_by_procObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_by_procVariables struct {
}

// filter_by_procPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadFilter_by_procObjects or ebpf.CollectionSpec.LoadAndAssign.
type filter_by_procPrograms struct {
	FilterProcessPort *ebpf.Program `ebpf:"filter_process_port"`
}

func (p *filter_by_procPrograms) Close() error {
	return _Filter_by_procClose(
		p.FilterProcessPort,
	)
}

func _Filter_by_procClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed filter_by_proc_bpfeb.o
var _Filter_by_procBytes []byte
